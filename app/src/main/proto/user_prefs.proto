syntax = "proto3";

option java_package = "com.codelab.android.datastore";
option java_multiple_files = true;
option java_outer_classname = "UserProto";

message UserPreferences {
  bool sex = 1;
  string user_name = 2;
  int32 age = 3;      // 添加用户年龄
}

/*
在 Protocol Buffers（proto3）中，字段标识符（field identifier）是字段的唯一标识符，而不是字段的顺序。
这个标识符是一个数字，用于在序列化和反序列化时标识消息中的字段。因此，你看到的数字 1、2、3、4 等是字段的标识符。

proto3 不支持字段的默认值。所有字段都是可选的，如果字段没有设置值，那么在序列化时它将被忽略。



谨慎修改字段： 一旦你的 Protocol Buffers 文件开始在生产环境中使用，就应该谨慎修改已定义的消息字段。
  删除或者修改字段可能会导致与旧版本不兼容。如果需要进行不兼容的更改，考虑定义新的消息类型，并逐步迁移代码。

版本兼容性： 保持对 Protocol Buffers 版本的注意，尽量使用最新版本。新版本可能包含性能优化和新特性。

字段标识符的选择： 字段标识符是 Protocol Buffers 中的关键概念，因此选择合适的标识符非常重要。
  避免频繁修改字段标识符，以保持稳定性。

枚举类型的使用： 如果你需要定义一组可能的值，考虑使用枚举类型。枚举类型能够提供更明确的含义，有助于代码的可读性。

字段命名规范： 使用清晰、具有描述性的字段命名，以提高代码的可维护性。遵循命名规范，比如使用 camelCase 风格。

编码和解码异常处理： 在进行编码和解码时，注意处理异常情况。虽然 proto3 不支持默认值，但在编码和解码期间可能会遇到一些问题，
  如字段类型不匹配等。

多语言支持： Protocol Buffers 支持多种编程语言，确保你的应用程序的各个部分都能够正确地序列化和反序列化 Protocol Buffers 消息。

文档和注释： 在 .proto 文件中添加注释，以便为消息和字段提供描述。好的文档能够提高代码的可读性和维护性。

生成的代码检查： 生成的代码可能会包含一些特定于语言的细节，确保检查生成的代码以确保其符合你的预期。

使用 proto 文件选项： Protocol Buffers 提供了一些选项，可以通过在 .proto 文件中添加选项来配置生成的代码。
  例如，Java 中的 optional 选项等。
 */